(function() {
  var LiquidEngine, Path, Q, exports, fs, grunt, plugin;

  LiquidEngine = require("./liquid-ext");

  Q = require("q");

  fs = require("fs");

  Path = require("path");

  grunt = require("grunt");

  plugin = function() {
    var compile, engine, ensureCompiled, init, partials, registerFunctions, registerHelper, registerPartial, render;
    engine = null;
    partials = {};
    init = function(options) {
      return engine = new LiquidEngine;
    };
    compile = function(src, options) {
      return engine.extParse(src, function(name, cb) {
        if (name in partials) {
          return cb(null, partials[name]);
        } else {
          return cb(new Error("Unknown partial: " + name + ". Known: " + (Object.keys(partials))));
        }
      });
    };
    ensureCompiled = function(template, options) {
      if (typeof template === "string") {
        return compile(template, options);
      } else {
        return template;
      }
    };
    render = function(template, options) {
      return ensureCompiled(template, options).then(function(template) {
        return template.render(options);
      });
    };
    registerFunctions = function(helperFunctions) {
      return engine.registerFilters(helperFunctions);
    };
    registerHelper = function(helperName, helper) {
      var o;
      o = {};
      o[helperName] = helper;
      return registerFunctions(o);
    };
    registerPartial = function(name, content) {
      return partials[name] = content;
    };
    return {
      init: init,
      compile: function(src, options, callback) {
        return compile.apply(null, arguments).nodeify(callback);
      },
      render: function(template, options, callback) {
        return render.apply(null, arguments).nodeify(callback);
      },
      registerFunctions: registerFunctions,
      registerHelper: registerHelper,
      registerPartial: registerPartial,
      liquid: LiquidEngine
    };
  };

  module.exports = exports = plugin();

}).call(this);
